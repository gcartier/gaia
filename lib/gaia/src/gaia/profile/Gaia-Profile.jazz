;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Gaia Profile
;;;


(module protected gaia.profile.Gaia-Profile jazz


(import (jazz.designer)
        (jazz.editor.jazz)
        (jazz.foreign)
        (jazz.graphic)
        (jazz.ide)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.log)
        (jazz.platform)
        (jazz.project)
        (jazz.runtime)
        (jazz.system)
        (jazz.tie)
        (jazz.ui)
        (jazz.ui.activity)
        (jazz.ui.clipboard)
        (jazz.ui.view)
        (jazz.website)
        (gaia)
        (time))


(class Gaia-Profile extends IDE-Profile
  
  
  ;;;
  ;;;; C -> Lisp
  ;;;
  
  
  (method override (test9)
    (let ((text (get-focus)))
      (if (is-not? text Text-View)
          (bell)
        (let ((lines (selection-lines~ text)))
          (replace-selection~ text (c->lisp lines))))))
  
  
  (method override (test0)
    (let ((text (get-focus)))
      (if (is-not? text Text-View)
          (bell)
        (let ((content (get-clipboard-text)))
          (if (not content)
              (bell)
            (let ((lines (split-lines content)))
              (replace-selection~ text (c->lisp lines))))))))
  
  
  (method (c->lisp lines)
    (define (convert line)
      (let ((output (open-output-string))
            (end (- (cardinality line) 1)))
        (let (iter (i 0) (constituent #f))
          (define (line-ref i)
            (and (between? i 0 end)
                 (string-ref line i)))
          
          (when (<= i end)
            (let ((p (and (> i 0) (string-ref line (- i 1))))
                  (c (string-ref line i))
                  (n (and (< i end) (string-ref line (+ i 1)))))
              (define (next)
                (if constituent
                    (constituent-end)
                  (write-char c output)
                  (iter (+ i 1) #f)))
              
              (define (constituent-end)
                (when constituent
                  (if (and n (eqv? n #\())
                      (begin
                        (write-char #\( output)
                        (output-constituent)
                        (write-char #\space output)
                        (iter (+ i 2) #f))
                    (output-constituent)
                    (iter (+ i 1) #f))))
              
              (define (output-constituent)
                (cond ((not constituent))
                      ((string=? constituent "true")
                       (display "#t" output))
                      ((string=? constituent "false")
                       (display "#f" output))
                      ((and (string=? constituent "glm::vec3")
                            (eqv? n #\())
                       (display "vertex" output))
                      (else
                       (display constituent output))))
              
              (define (ensure-space c)
                (when (and c (constituent? c))
                   (write-char #\space output)))
              
              (define (constituent? c)
                (or (alphanumeric? c)
                    (eqv? c #\.)
                    (eqv? c #\:)))
              
              (define (default)
                (if (and constituent n (constituent? n))
                    (iter (+ i 1) constituent)
                  (next)))
              
              (cond ((not constituent)
                     (when (and (or (not p) (not (constituent? p)))
                                (alphabetic? c))
                       (set! constituent (string c))))
                    (else
                     (when (constituent? c)
                       (if (and (upper-case? c)
                                (lower-case? (last constituent))
                                (not (starts-with? constituent "gl" ignore-case?: #t))
                                (not (starts-with? constituent "wgl" ignore-case?: #t)))
                           (set! constituent (string-append constituent (string #\- (downcase c))))
                         (set! constituent (string-append constituent (string c)))))))
              
              (case c
                ((#\,)
                 (when (and n (constituent? n))
                   (write-char #\space output))
                 (output-constituent)
                 (iter (+ i 1) #f))
                ((#\;)
                 (output-constituent)
                 (iter (+ i 1) #f))
                ((#\/)
                 (if (eqv? n #\/)
                     (begin
                       (output-constituent)
                       (write-char #\; output)
                       (write-char #\; output)
                       (iter (+ i 2) #f))
                   (next)))
                ((#\{)
                 (output-constituent)
                 (ensure-space p)
                 (display "(begin" output)
                 (ensure-space n)
                 (iter (+ i 1) #f))
                ((#\})
                 (output-constituent)
                 (write-char #\) output)
                 (ensure-space n)
                 (iter (+ i 1) #f))
                ((#\|)
                 (if (eqv? n #\|)
                     (begin
                       (output-constituent)
                       (ensure-space p)
                       (display "or" output)
                       (ensure-space (line-ref (+ i 2)))
                       (iter (+ i 2) #f))
                   (default)))
                ((#\&)
                 (if (eqv? n #\&)
                     (begin
                       (output-constituent)
                       (ensure-space p)
                       (display "and" output)
                       (ensure-space (line-ref (+ i 2)))
                       (iter (+ i 2) #f))
                   (default)))
                ((#\tab)
                 (output-constituent)
                 (display "    " output)
                 (iter (+ i 1) #f))
                ((#\f)
                 (if (and p
                          (numeric? p)
                          (or (not n) (not (constituent? n))))
                     (begin
                       (output-constituent)
                       (iter (+ i 1) #f))
                   (default)))
                (else
                 (default))))))
        (get-output-string output)))
    
    (map convert lines))
  
  
  ;;;
  ;;;; Live Coding
  ;;;
  
  
  (method override (test)
    (define (literal-range text)
      (let ((has-selection? (has-selection?~ text))
            (expl (new (explorer-class~ text) (get-model~ text) start: (get-start~ text) end: (get-end~ text))))
        (let (iter)
          (when (or has-selection? (outer-expr~ expl))
            (set! has-selection? #f)
            (let ((range (get-range~ expl)))
              (when (= (get-line~ (get-start~ range))
                       (get-line~ (get-end~ range)))
                (let ((literal-string (get-marked~ expl))
                      (literal (with-jazz-readtable
                                 (lambda ()
                                   (read-marked~ expl)))))
                  (cond ((or (integer? literal) (and (number? literal) (inexact? literal)))
                         (or (iter) (list literal-string literal range)))
                        ((is? literal Color)
                         (list literal-string literal range))
                        (else
                         (iter))))))))))
    
    (define (choose-literal text undoer atomic-preserved modified? literal-string literal range pos)
      (define (choose-number)
        (let* ((page-height 10)
               (width 100)
               (mid (fxround/ width 2))
               (precision (and (inexact? literal)
                               (let ((pos (find literal-string #\.)))
                                 (if (not pos)
                                     0
                                   (- (cardinality literal-string) pos 1)))))
               (factor (if (inexact? literal)
                           (* 10 (/ (expt 10. precision)))
                         50)))
          (define (scroll-proc scrollbar action line-height page-height thumb-pos orientation)
            (define (scroll-action)
              (define (scroll amount)
                (set-pos~ scrollbar (+ (get-pos~ scrollbar) amount) redraw?: #t))
              
              (case action
                ((line-up)     (scroll (- line-height)))
                ((line-down)   (scroll line-height))
                ((page-up)     (scroll (- page-height)))
                ((page-down)   (scroll page-height))
                ((thumb-track) (set-pos~ scrollbar thumb-pos redraw?: #t))))
            
            (scroll-action)
            (let ((pos (get-pos~ scrollbar)))
              (when (not modified?)
                (set-caret~ text (get-start~ range)))
              (let ((normalized (/ (cast <fl> (- pos mid)) 50)))
                (let ((str (if (inexact? literal)
                               (format "{r precision: :v}" (+ literal (* normalized factor)) (+ precision 1))
                             (->string (+ literal (inexact->exact (round (* normalized factor)))))))
                      (start (get-start~ text)))
                  (replace~ text range (list str))
                  (update-window~ (get-toplevel))
                  (eval-sel text)
                  (set! modified? #t)
                  (set! range (new Range$Cell$ start (get-start~ text)))
                  (set-caret~ text start)))))
          
          (let ((choose
                  (new Scrollbar
                    size: {Dimension 200 13}
                    orientation: 'horz
                    pos: mid
                    range: (new Range 0 (+ width page-height))
                    page-height: page-height
                    scroll-proc: scroll-proc
                    return-press-handler: (new Event-Handler execute: return-press)
                    escape-press-handler: (new Event-Handler execute: escape-press)
                    focus-lose-handler: (new Event-Handler execute: edition-ended))))
            (popup~ text choose (nu- pos {Dimension 100 25}))
            (set-pos~ choose mid)
            (acquire-focus~ choose))))
      
      (define (choose-color)
        (let ((choose
                (new Color-Choose
                  size: {Dimension 527 109}
                  background: {Color Dark-Gray}
                  color: literal
                  feedback: (lambda (color)
                              (when (not modified?)
                                (set-caret~ text (get-start~ range)))
                              (let ((str (->string color))
                                    (start (get-start~ text)))
                                (replace~ text range (list str))
                                (update-window~ (get-toplevel))
                                (eval-sel text)
                                (set! modified? #t)
                                (set! range (new Range$Cell$ start (get-start~ text)))
                                (set-caret~ text start)))
                  return-press-handler: (new Event-Handler execute: return-press)
                  escape-press-handler: (new Event-Handler execute: escape-press)
                  focus-lose-handler: (new Event-Handler execute: edition-ended))))
          (popup~ text choose (nu- pos {Dimension 304 125}))
          (acquire-focus~ choose)))
      
      (define (return-press evt)
        (end-atomic-undo~ undoer atomic-preserved)
        (set! undoer #f)
        (close-popups~ (get-toplevel)))
      
      (define (escape-press evt)
        (end-atomic-undo~ undoer atomic-preserved)
        (set! undoer #f)
        (when modified?
          (undo~ text)
          (set-caret~ text (get-start~ text))
          (eval-sel text))
        (close-popups~ (get-toplevel)))
      
      (define (edition-ended evt)
        (when undoer
          (end-atomic-undo~ undoer atomic-preserved)))
      
      (cond ((or (integer? literal) (and (number? literal) (inexact? literal)))
             (choose-number))
            ((is? literal Color)
             (choose-color))))
    
    (define (eval-sel text)
      (with-safe-explore
        (lambda ()
          (let ((range (current-declaration-range~ text)))
            (if (not range)
                (bell)
              (evaluate-range~ text range))))))
    
    (let ((text (get-focus)))
      (let ((info (literal-range text)))
        (if (not info)
            (begin
              (user-message "No literal found")
              (bell))
          (let ((undoer (get-undoer~ (get-model~ text))))
            (let ((atomic-preserved (start-atomic-undo~ undoer)))
              (bind (literal-string literal range) info
                (let* ((start (get-start~ range))
                       (end (get-end~ range))
                       (mid (fxround/ (+ (get-col~ start) (get-col~ end)) 2))
                       (pos (text->view~ text (new Cell (get-line~ start) mid))))
                  (choose-literal text undoer atomic-preserved #f literal-string literal range pos)))))))))
  
  
  ;;;
  ;;;; Trailing Whitespace
  ;;;
  
  
  (method override (test8)
    (let ((project (find-project~ (get-workbench) 'world:lib)))
      (let ((directory (get-parent~ (get-tag-reference~ (get-form~ project)))))
        (search-trailing-whitespace directory: directory))))))
